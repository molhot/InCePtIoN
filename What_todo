playgroundにお試しは作成
必ずsrcsには本番のもの以外入れない(ルートディレクトリのMakefileにも本番のものしか描かない)

makefileを用いてドッカーを立ち上げるっぽい？

各Dockerイメージは、対応するサービスと同じ名前を持つ必要があります。
つまり、NGINXのコンテナは「nginx」という名前に
WordPress + php-fpmのコンテナは「wordpress」という名前に
MariaDBのコンテナは「mariadb」という名前にする必要があります。
各サービスは、独自のコンテナ内で実行される必要があります。
つまり、NGINX、WordPress + php-fpm、MariaDBはそれぞれ別々のコンテナで実行される必要があります。
パフォーマンスの観点から
コンテナはペンultimate安定版のAlpineまたは
Debianからビルドする必要があります。
どちらのディストリビューションを使用するかは、選択の余地があります。
各サービスに対して、独自のDockerfileを作成する必要があります。
各サービスに1つずつDockerfileを作成し
それらのDockerfileはdocker-compose.ymlからMakefileで呼び出される必要があります。
プロジェクトのDockerイメージを自分自身でビルドする必要があります。
既製のDockerイメージをプルしたり、DockerHubなどのサービスを使用することは禁止されています
（ただし、AlpineまたはDebianはこのルールの例外です）。

NGINXのみを含むDockerコンテナをセットアップする必要があります。このコンテナにはTLSv1.2またはTLSv1.3のみをサポートする設定が必要です。
nginxなしでWordPress + php-fpmを含むDockerコンテナをセットアップする必要があります。WordPressとphp-fpmはインストールおよび設定されている必要があります。
nginxなしでMariaDBを含むDockerコンテナをセットアップする必要があります。
WordPressデータベースを含むボリュームを設定する必要があります。
WordPressのウェブサイトファイルを含む別のボリュームを設定する必要があります。
コンテナ間の接続を確立するdocker-networkを設定する必要があります。コンテナはクラッシュした場合に再起動する必要があります。

networkに関してはymlファイルに記載すること
コンテナ起動時の無限ループは許可されない

PID 1（プロセスID 1）：
PID 1は、Linuxシステム内の最初に実行されるプロセスです。
Dockerコンテナ内では、通常はエントリーポイントとなるプロセスがPID 1として実行されます。
PID 1は特別な役割を果たし、システムの正常な起動、停止、シグナルの処理などを管理します。
PID 1の適切な設定は、コンテナの信頼性や正確なシャットダウンのために重要です。

Dockerfileは、Dockerイメージのビルド手順を定義するためのファイルです。
以下は、Dockerfileの作成における一般的なベストプラクティスのいくつかです：
1つのイメージに1つの責務を持たせる
：各Dockerイメージは、特定の役割や機能に関連するコンポーネントのみを含むように設計することが推奨されます。シングルレスポンシビリティ原則（Single Responsibility Principle）を適用することで、イメージの保守性と再利用性が向上します。

キャッシュの最大利用
：Dockerイメージのビルドは、レイヤーと呼ばれる独立したステップの組み合わせとして処理されます。ビルドステップの順序を適切に配置し、変更されない部分を先にビルドすることで、キャッシュの利用を最大化し、ビルド時間を短縮することができます。

不要なファイルやキャッシュの削除
：ビルドプロセスで生成された不要なファイルやキャッシュは、イメージサイズを増やすだけでなく、セキュリティ上のリスクも引き起こす可能性があります。ビルドステップの最後で不要なファイルやキャッシュを削除することが推奨されます。

セキュリティの考慮
：Dockerイメージのセキュリティは重要な要素です。公式なベースイメージの使用、最新のパッケージのインストール、脆弱性スキャンツールの使用など、セキュリティに関するベストプラクティスに準拠することが重要です。

最小権限の原則
：Dockerコンテナ内で実行されるプロセスやサービスには、必要最小限の権限を与えることが推奨されます。不必要な特権の使用を避け、セキュリティを強化します。

WordPressデータベースには、2つのユーザーが必要であり、そのうちの1人が管理者である必要があります。ただし、管理者のユーザー名には「admin」や「administrator」、「Administrator」といったキーワードを含めることはできません。つまり、ユーザー名に「admin」、「administrator」、「Administrator」などの単語や類似の表現（例: admin、administrator、Administrator、admin-123 など）は使用できません。
この制限は、セキュリティの観点から設けられています。一般的な攻撃者の手法の1つは、WordPressサイトの管理者アカウントに対してブルートフォース攻撃を行い、簡単なユーザー名を特定しようとするものです。このような攻撃を防ぐために、管理者のユーザー名には予測しにくい名前を使用することが推奨されています。
したがって、WordPressデータベースには、管理者以外の適切なユーザー名を持つ2つのユーザーを作成する必要があります。

/home/login/dataフォルダにボリュームをマウントすることができることを示しています。
ただし、loginの部分は自分のユーザー名に置き換える必要があります。
具体的には、Dockerコンテナ内の特定のパス（例えば、/var/www/htmlなど）
をホストマシン上の/home/login/dataフォルダにマウントすることができます。
これにより、Dockerコンテナ内のデータがホストマシンの指定した場所に永続的に保存されることが保証されます。

注意点として、loginの部分は自分のユーザー名に置き換える必要があります。
例えば、ユーザー名がjohnであれば、ホストマシン上のボリュームのパスは/home/john/dataとなります。

自分のユーザー名に合わせてパスを変更し、Dockerのボリュームマウントを適切に設定してください。

〜〜

具体的には、ドメイン名login.42.frを自分のローカルIPアドレスに関連付ける必要があります。
これにより、ブラウザからlogin.42.frにアクセスした際に、自分のウェブサイトが表示されるようになります。
例えば、自分のログイン名がjohnであれば、john.42.frを自分のローカルIPアドレスにリダイレクトさせる必要があります。

ドメイン名を設定するためには、以下の手順を実行する必要があります
（手順は環境によって異なる場合があります）：

DNSの設定: 
ドメイン名をローカルIPアドレスに関連付けるために、DNSの設定を変更する必要があります。
これは、ドメインのDNSレコードを編集することで実現できます。
具体的な手順は、ドメインレジストラやDNSサービスプロバイダのドキュメントを参照してください。

ローカルホストファイルの編集: 
ローカルマシンのホストファイルを編集して、ドメイン名をローカルIPアドレスに関連付ける必要があります。
ホストファイルは、WindowsではC:\Windows\System32\drivers\etc\hosts、Mac/Linuxでは/etc/hostsにあります。
ホストファイルに以下の行を追加します（自分のログイン名とローカルIPアドレスに適切に置き換えてください）：
phpの中
<ローカルIPアドレス> login.42.fr

例えば、ローカルIPアドレスが192.168.0.100であれば、以下のようになります：
192.168.0.100 login.42.fr

変更の反映: 
DNSの変更やホストファイルの編集が完了したら、変更を反映させるために
キャッシュのクリアやネットワークの再接続が必要な場合があります。ブラウザのキャッシュもクリアすることをおすすめします。
これらの手順を実行することで
指定したドメイン名を自分のローカルIPアドレスに関連付けることができます。
その結果、ブラウザからlogin.42.frにアクセスすると、自分のウェブサイトが表示されるはずです。

ただし、ドメイン名の設定やローカルホストファイルの編集はシステムの設定変更を伴うため、
注意が必要です。必要に応じて、ネットワークやシステムの管理者に相談することをおすすめします。